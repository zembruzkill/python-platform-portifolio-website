// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
}

model Module {
  id             String   @id @default(cuid())
  title          String
  is_public      Boolean  @default(false)
  total_lessons  Int
  total_duration Int
  description    String
  course         Course   @relation(fields: [courseId], references: [id])
  courseId       String
  Lesson         Lesson[]
}

model Lesson {
  id              String  @id @default(cuid())
  title           String
  description     String
  is_public       Boolean @default(false)
  liberation_days Int
  liberation_type String
  page_order      Int
  duration        Int
  auto_play       Boolean @default(true)
  slug            String  @unique
  modules         Module  @relation(fields: [moduleId], references: [id])
  moduleId        String
  type            String
  content         String
}

model Category {
  id     String   @id @default(cuid())
  name   String
  Course Course[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  slug        String   @unique
  popularity  Int      @default(0)
  level       String
  Module      Module[]
  categories  Category @relation(fields: [categoryId], references: [id])
  categoryId  String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
